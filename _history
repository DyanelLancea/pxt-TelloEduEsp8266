{"entries":[{"timestamp":1733124734036,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"s"],[0,"://"],[-1,"developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" id=\"+Z|/-Q_HOti=pJWVXcCG\" x=\"20\" y=\"20"],[1,"www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start"],[0,"\"></"]],"start1":12,"start2":12,"length1":135,"length2":62},{"diffs":[[0,"</block>"],[1,"\n  "],[0,"<block t"]],"start1":72,"start2":72,"length1":16,"length2":19},{"diffs":[[0,"ver\""],[-1," id=\"N[7Eyi26+!qqDiQVz3dt\" x=\"225\" y=\"20\""],[0,"></b"]],"start1":107,"start2":107,"length1":49,"length2":8},{"diffs":[[0,"</block>"],[1,"\n"],[0,"</xml>"]],"start1":112,"start2":112,"length1":14,"length2":15}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"//% color=#126180 icon=\"\\uf0fb\" block=\"Tello Drone Control\"\n//% groups=\"['ESP8266', 'Tello']\"\nnamespace TelloControl {\n    // Initialize the connection variables\n    let telloIP = \"192.168.10.1\";\n    let commandPort = 8889;\n    // Function to read and display response on the micro:bit\n    function readResponse(): void {\n        let response = serial.readString();\n        if (response.includes(\"OK\")) {\n            basic.showString(\"Connected\");\n        } else {\n            basic.showString(\"Failed\");\n            basic.showString(response); // Display the actual error\n        }\n    }\n    function sendCommandToTello(command: string): void {\n        // Assuming you're already connected to Tello WiFi\n        sendAT(`AT+CIPSEND=${command.length}`, 500);  // Send command length and command\n        serial.writeString(command + \"\\r\\n\"); // Send the actual command\n        basic.pause(500);\n        readResponse(); // Display Tello's response\n    }\n    function sendAT(command: string, wait: number = 0) {\n        serial.writeString(`${command}\\u000D\\u000A`);\n        basic.pause(wait);\n    }\n    // Function to initialize ESP8266 and redirect serial communication\n    //% block=\"initialize ESP8266 with TX %tx| RX %rx\"\n    //% group=\"ESP8266\"\n    //% tx.defl=SerialPin.P8\n    //% rx.defl=SerialPin.P12\n    export function initESP8266(tx: SerialPin, rx: SerialPin): void {\n        serial.redirect(tx, rx, BaudRate.BaudRate115200); // Redirect TX and RX\n        basic.pause(100);\n        serial.setTxBufferSize(128);\n        serial.setRxBufferSize(128);\n        sendAT(\"AT+RST\", 2000); // Reset the ESP8266\n        sendAT(\"AT+CWMODE=1\", 500); // Set ESP8266 to Station Mode (STA mode)\n    }\n    //% block=\"land\"\n    //% group=\"Tello\"\n    export function land(): void {\n        sendCommandToTello(\"land\");\n    }\n    //% block=\"takeoff\"\n    //% group=\"Tello\"\n    export function takeOff(): void {\n        sendCommandToTello(\"takeoff\");\n    }\n    //% block=\"Wi-Fi connected\"\n    //% group=\"ESP8266\"\n    export function isWiFiConnected(): boolean {\n        sendAT(\"AT+CWJAP?\"); // This command checks the current Wi-Fi status\n        basic.pause(500); // Give time to get the response\n        let response = serial.readString(); // Read response from ESP8266\n        if (response.includes(\"No AP\")) {\n            return false; // Not connected\n        } else if (response.includes(\"OK\") || response.includes(\"Connected\")) {\n            return true; // Connected\n        } else {\n            return false; // In case of other unexpected responses\n        }\n    }\n    // Function to connect to Tello Wi-Fi (1)\n    //% group=\"Tello\"\n    //% block=\"connect to Tello Wi-Fi SSID %ssid\"\n    export function connectToWiFi(ssid: string): void {\n        setupUDPConnection(); // Run once\n        sendAT(`AT+CWJAP=\"${ssid}\",\"\"`, 5000); // Assuming no password is required\n        readResponse(); // Display response on micro:bit\n    }\n    // Seting up UDP connection (2)\n    //% group=\"Tello\"\n    //% block=\"Set up UDP connection\"\n    export function setupUDPConnection(): void {\n        sendAT(`AT+CIPSTART=\"UDP\",\"${telloIP}\",${commandPort}`, 500);\n        basic.pause(500); // Allow some time for connection setup\n    }\n    //% block=\"initialize Tello into SDK mode\"\n    //% group=\"Tello\"\n    export function initialize(): void {\n        sendCommandToTello(\"command\");\n    }\n}"],[1,"\n"]],"start1":0,"start2":0,"length1":3364,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"   \""],[-1,"testFiles\": [\n        \"test.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\""],[1,"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":239,"start2":239,"length1":76,"length2":31}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"}]}],"snapshots":[{"timestamp":1733124734035,"editorVersion":"7.0.51","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"PowerIssueCheck\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}}],"shares":[],"lastSaveTime":1733124834117}